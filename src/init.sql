-- Remember, everything is nullable unless you say it's not.
-- Also, PRIMARY KEY implies NOT NULL- the below stuff is extra explicit because otherwise I'd forget.
-- Also, remember that we're using SQLite.

CREATE TABLE Servers (
       -- generated by Discord, not ascending or anything, will tend to be sparse in our data set
       ID INTEGER NOT NULL PRIMARY KEY
);

-- The below things are for games whose turns are, at the very least, tracked by mbot.
CREATE TABLE Games (
       ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
       ServerID INTEGER NOT NULL,
       GameMaster INTEGER, -- Discord ID of GM
       -- This channel doesn't need to be added to the Channels table.
       NotificationChannel INTEGER,
       -- If there's more than one game in a server, we may not be able to
       -- infer which game the GM is trying to manipulate with the game management
       -- commands. So, we'll make them name the games.
       -- We'll also want to provide commands for retrieving all of this information
       -- for a server.
       -- This is nullable because having a single unnamed game in a server is just fine.
       -- I would recommend making the GameName very short, though.
       -- Otherwise the GM commands may become unbearable to type, in certain cases.
       GameName TEXT,
       UNIQUE(ServerID, GameName), -- Game names are server local.
       FOREIGN KEY(ServerID) REFERENCES Servers(ID) ON DELETE CASCADE
);

CREATE TABLE Channels (
       -- this is generated by Discord, not ascending or anything, will tend to be sparse in our data set
       ID INTEGER NOT NULL PRIMARY KEY,
       GameID INTEGER,
       ControlState INTEGER NOT NULL, -- 0 is Off (Don't Track), 1 is On, 2 is Notify, 3 is Silent
       DefaultGameMode INTEGER, -- 0 is Unordered, 1 is Ordered
       RoundsToRetain INTEGER, -- TODO: this
       Stale INTEGER,
        -- note that these constraints have to come after all the fields
       FOREIGN KEY(GameID) REFERENCES Games(ID) ON DELETE CASCADE
);

-- We need to store every game a player is in because we need to be able to
-- automatically delete player Discord IDs from our DB.
-- Not doing so would be retaining Discord user information
-- "longer than necessary for the operation of [our] application", which,
-- besides being a bit creepy and a waste of DB space if we let such things build up
-- for a long time, is a violation of the Discord Developer Policy.
-- For this purpose, we store a separate row for each (Player, Game) combination.
-- This also allows us to store game specific preferences for each player.
CREATE TABLE Players (
       -- this is generated by Discord, not ascending or anything, will tend to be sparse in our data set
       ID INTEGER NOT NULL,
       GameID INTEGER NOT NULL,
       PRIMARY KEY(ID, GameID),
       FOREIGN KEY(GameID) REFERENCES Games(ID) ON DELETE CASCADE
);

-- This is how we'd store channel specific preferences for each player.
-- Not needed for anything else, but we can keep it.
CREATE TABLE ChannelPlayers (
       PlayerID INTEGER NOT NULL,
       GameID INTEGER NOT NULL,
       ChannelID INTEGER NOT NULL,
       PRIMARY KEY(PlayerID, ChannelID),
       -- this is necessarily true, doesn't need to be enforced here
       -- since each channel can be in no more than one game
       -- and channel IDs are unique across discord
       UNIQUE(GameID, ChannelID),
       FOREIGN KEY(PlayerID, GameID) REFERENCES Players(ID, GameID) ON DELETE CASCADE,
       FOREIGN KEY(ChannelID) REFERENCES Channels(ID) ON DELETE CASCADE
);

CREATE TABLE Rounds (
       ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
       ChannelID INTEGER NOT NULL,
       StartTime TEXT NOT NULL, -- DateTime as ISO8601 strings ("YYYY-MM-DD HH:MM:SS.SSS")
       GameMode INTEGER NOT NULL,
       RemainingTurns INTEGER NOT NULL, -- Does this *need* to be on every Round?
       TurnUnlocked INTEGER, -- 0 is nope, 1 is yes.
       FOREIGN KEY(ChannelID) REFERENCES Channels(ID) ON DELETE CASCADE,
       UNIQUE(ChannelID, StartTime)
);

-- storing who participates in what rounds
CREATE TABLE RoundPlayers (
       PlayerID INTEGER NOT NULL,
       GameID INTEGER NOT NULL,
       RoundID INTEGER NOT NULL,
       UsedTurns INTEGER,
       PRIMARY KEY(PlayerID, RoundID),
       FOREIGN KEY(PlayerID, GameID) REFERENCES Players(ID, GameID) ON DELETE CASCADE,
       FOREIGN KEY(RoundID) REFERENCES Rounds(ID) ON DELETE CASCADE
);

-- Not all players in a game will always be participating in every round.
-- In an unordered round, priorities will be ignored, probably.
-- In an ordered round, there might be players that go multiple times.
CREATE TABLE Turns (
       ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
       PlayerID INTEGER NOT NULL,
       GameID INTEGER NOT NULL,
       RoundID INTEGER NOT NULL,
       Priority INTEGER,
       UseTime TEXT, -- DateTime as ISO8601 strings ("YYYY-MM-DD HH:MM:SS.SSS")
       SkipTime TEXT,
       Description TEXT,
       FOREIGN KEY(PlayerID, GameID) REFERENCES Players(ID, GameID) ON DELETE CASCADE,
       FOREIGN KEY(RoundID) REFERENCES Rounds(ID) ON DELETE CASCADE
);
